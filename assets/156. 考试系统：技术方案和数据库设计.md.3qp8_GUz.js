import{_ as d,c as a,o as e,ag as r}from"./chunks/framework.CCM1LoTM.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"156. 考试系统：技术方案和数据库设计.md","filePath":"156. 考试系统：技术方案和数据库设计.md"}'),p={name:"156. 考试系统：技术方案和数据库设计.md"};function i(s,t,h,n,o,l){return e(),a("div",null,t[0]||(t[0]=[r('<p>分析完需求，这节来设计下技术方案。</p><h2 id="技术栈" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈" aria-label="Permalink to &quot;技术栈&quot;">​</a></h2><p>前端部分 React + Antd Design，脚手架用 create-vite：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/156-1.png" alt="" loading="lazy"></p><p>后端服务是 Nest + Prisma，会拆分多个微服务，之间用 TCP 通信。</p><p>数据库是 mysql + redis，mysql 做持久化存储，redis 做缓存以及临时数据的存储。</p><p>用 minio 做 OSS 对象存储服务，存储上传的文件。</p><p>用 nacos 来做注册中心、配置中心，统一管理所有的配置、服务的地址注册。</p><p>rabbitmq 做消息队列，用于微服务之间的异步通信。</p><p>文档用 swagger 生成，部署用 docker compose。</p><h2 id="微服务拆分" tabindex="-1">微服务拆分 <a class="header-anchor" href="#微服务拆分" aria-label="Permalink to &quot;微服务拆分&quot;">​</a></h2><p>微服务的特点是可以独立开发、独立部署。</p><p>微服务之间通过 TCP 或者 gRPC 来做同步通信，通过消息队列来做异步通信。</p><p>我们之前分析出的四个模块，就可以拆分为 4 个微服务。</p><p>用户、考试、判卷、分析</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/156-2.png" alt="" loading="lazy"></p><p>每个微服务都暴露 HTTP 接口出去，之间可以通过 TCP 来进行同步调用。</p><p>并且也可以通过 RabbitMQ 来做异步通信。</p><p>比如判卷完之后需要更新成绩排行榜，这时候就没必要同步生成，用消息队列通知分析微服务做异步生成就行。</p><h2 id="数据库设计" tabindex="-1">数据库设计 <a class="header-anchor" href="#数据库设计" aria-label="Permalink to &quot;数据库设计&quot;">​</a></h2><p>然后来设计下数据库表：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/156-3.png" alt="" loading="lazy"></p><p>需要这三个表。</p><p>用户表存储用户信息。</p><p>考试表存储考试和试卷信息，关联着创建考试的用户，多对一关系。</p><p>答卷表存储用户的答卷，和考试表是多对一关系，和用户表也是多对一关系。</p><p>也就是说一个用户可以有多个答卷、一个考试可以有多个答卷，但一个答卷只能属于一个用户、一个考试。</p><p>详细设计如下：</p><p>用户表 user：</p><table tabindex="0"><thead><tr><th>字段名</th><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>INT</td><td>用户ID</td></tr><tr><td>username</td><td>VARCHAR(50)</td><td>用户名</td></tr><tr><td>password</td><td>VARCHAR(50)</td><td>密码</td></tr><tr><td>email</td><td>VARCHAR(50)</td><td>邮箱</td></tr><tr><td>create_time</td><td>DATETIME</td><td>创建时间</td></tr><tr><td>update_time</td><td>DATETIME</td><td>更新时间</td></tr></tbody></table><p>考试表 exam：</p><table tabindex="0"><thead><tr><th>字段名</th><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>INT</td><td>考试ID</td></tr><tr><td>createUserId</td><td>INT</td><td>创建者ID</td></tr><tr><td>name</td><td>VARCHAR(50)</td><td>考试名</td></tr><tr><td>isPublish</td><td>BOOLEAN</td><td>是否发布</td></tr><tr><td>isDelete</td><td>BOOLEAN</td><td>是否删除</td></tr><tr><td>content</td><td>TEXT</td><td>试卷内容 JSON</td></tr><tr><td>create_time</td><td>DATETIME</td><td>创建时间</td></tr><tr><td>update_time</td><td>DATETIME</td><td>更新时间</td></tr></tbody></table><p>答卷表 answer：</p><table tabindex="0"><thead><tr><th>字段名</th><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>INT</td><td>答卷ID</td></tr><tr><td>answererId</td><td>INT</td><td>答题人ID</td></tr><tr><td>examId</td><td>INT</td><td>答卷ID</td></tr><tr><td>content</td><td>TEXT</td><td>答卷JSON</td></tr><tr><td>score</td><td>INT</td><td>分数</td></tr><tr><td>create_time</td><td>DATETIME</td><td>创建时间</td></tr><tr><td>update_time</td><td>DATETIME</td><td>更新时间</td></tr></tbody></table><p>然后划分下模块：</p><h2 id="模块划分" tabindex="-1">模块划分 <a class="header-anchor" href="#模块划分" aria-label="Permalink to &quot;模块划分&quot;">​</a></h2><p>首先是用户模块，实现登录、注册、修改密码的功能：</p><table tabindex="0"><thead><tr><th>接口路径</th><th>请求方式</th><th>描述</th></tr></thead><tbody><tr><td>/user/login</td><td>POST</td><td>用户登录</td></tr><tr><td>/user/register</td><td>POST</td><td>用户注册</td></tr><tr><td>/user/update_password</td><td>POST</td><td>用户修改密码</td></tr></tbody></table><p>试卷模块：</p><table tabindex="0"><thead><tr><th>接口路径</th><th>请求方式</th><th>描述</th></tr></thead><tbody><tr><td>/exam/add</td><td>POST</td><td>创建考试</td></tr><tr><td>/exam/delete</td><td>DELETE</td><td>删除考试</td></tr><tr><td>/exam/list</td><td>GET</td><td>考试列表</td></tr><tr><td>/exam/save</td><td>POST</td><td>保存试卷内容</td></tr><tr><td>/exam/publish</td><td>GET</td><td>发布考试</td></tr></tbody></table><p>答卷模块：</p><table tabindex="0"><thead><tr><th>接口路径</th><th>请求方式</th><th>描述</th></tr></thead><tbody><tr><td>/answer/add</td><td>POST</td><td>添加答卷</td></tr><tr><td>/answer/list</td><td>GET</td><td>答卷列表</td></tr><tr><td>/answer/export</td><td>GET</td><td>导出答卷列表为 excel</td></tr></tbody></table><p>分析模块：</p><table tabindex="0"><thead><tr><th>接口路径</th><th>请求方式</th><th>描述</th></tr></thead><tbody><tr><td>/analyse/ranking</td><td>GET</td><td>成绩排行榜</td></tr></tbody></table><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>这节我们设计了下技术方案。</p><p>技术栈：前端是 antd + react + vite，后端是 nest + prisma，数据库是 mysql + redis，对象存储用 minio，API 文档用 swagger 生成，部署用 docker compose + pm2，网关使用 nginx，注册中心配置中心用 nacos，消息队列用 rabbitmq。</p><p>划分了 4 个微服务：用户微服务、考试微服务、答卷微服务、分析微服务</p><p>之间通过 TCP 做同步通信，通过 RabbitMQ 做异步通信。</p><p>数据库表有 3 个：用户表 user、考试表 exam、答卷表 answer</p><p>模块有 4 个：用户模块、考试模块、答卷模块、分析模块</p><p>下节正式开始开发。</p>',52)]))}const m=d(p,[["render",i]]);export{c as __pageData,m as default};
