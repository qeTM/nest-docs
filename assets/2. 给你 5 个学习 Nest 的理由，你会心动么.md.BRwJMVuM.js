import{_ as s,c as e,o as p,ag as t}from"./chunks/framework.CCM1LoTM.js";const d=JSON.parse('{"title":"2. 给你 5 个学习 Nest 的理由，你会心动么","description":"","frontmatter":{},"headers":[],"relativePath":"2. 给你 5 个学习 Nest 的理由，你会心动么.md","filePath":"2. 给你 5 个学习 Nest 的理由，你会心动么.md"}'),i={name:"2. 给你 5 个学习 Nest 的理由，你会心动么.md"};function n(l,a,o,c,r,g){return p(),e("div",null,a[0]||(a[0]=[t('<h1 id="_2-给你-5-个学习-nest-的理由-你会心动么" tabindex="-1">2. 给你 5 个学习 Nest 的理由，你会心动么 <a class="header-anchor" href="#_2-给你-5-个学习-nest-的理由-你会心动么" aria-label="Permalink to &quot;2. 给你 5 个学习 Nest 的理由，你会心动么&quot;">​</a></h1><p>你可能经常听到 Nest，会觉得它和我的工作也没啥关系呀，为什么要学习 Nest 呢？</p><p>这里给出 5 个学习 Nest 的理由：</p><h2 id="最流行的-node-企业级框架" tabindex="-1">最流行的 Node 企业级框架 <a class="header-anchor" href="#最流行的-node-企业级框架" aria-label="Permalink to &quot;最流行的 Node 企业级框架&quot;">​</a></h2><p>开发 node 应用有 3 个层次：</p><ul><li>直接用 http、https 包的 createServer api</li><li>使用 express、koa 这种处理请求响应的库</li><li>使用 nest、egg、midway 这类企业级框架</li></ul><p>直接用 createServer api 创建服务适合特别简单的场景，比如工具提供的开发服务。</p><p>express、koa 这种处理请求响应的库并不能约束代码的写法，代码可以写的很随意，所以不适合开发大型项目。</p><p>大型项目会用企业级开发框架，也就是规定了代码的写法，对很多功能都有开箱即用的解决方案的框架。</p><p>比如 Nest 代码一般都是分了很多模块：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-1.png" alt="" loading="lazy"></p><p>每个模块下都是 controller、service、guard、filter、interceptor、dto 等这些代码：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-2.png" alt="" loading="lazy"></p><p>什么代码放在哪里都是有规范的。</p><p>上面这个目录是一个 8.7k 的已经盈利的项目的服务端代码，感兴趣可以看一下：</p><p><a href="https://github.com/apitable/apitable/tree/35b05eb421d31a4e4b68ca0bacb1fb484186f4ea/packages/room-server" target="_blank" rel="noreferrer">https://github.com/apitable/apitable/tree/35b05eb421d31a4e4b68ca0bacb1fb484186f4ea/packages/room-server</a></p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-3.png" alt="" loading="lazy"></p><p>那 egg 和 midway 呢？</p><p>egg 的 ts 支持不行，在当下 ts 这么主流的情况下，已经不合适了。更何况它是阿里的项目，而阿里 egg 团队也被打包裁了。</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-4.png" alt="" loading="lazy"></p><p>midway 呢？</p><p>star 数差太多了，和 nest 不在一个量级。</p><p>而且你能保证它不是下一个 egg 么？</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-5.png" alt="" loading="lazy"></p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-6.png" alt="" loading="lazy"></p><p>Nest 是在全世界都很火，在国内也越来越流行，找不到啥对手。</p><p>如果你想学习 Node 框架，那 Nest 基本是唯一的选择了。</p><h2 id="学习各种后端中间件" tabindex="-1">学习各种后端中间件 <a class="header-anchor" href="#学习各种后端中间件" aria-label="Permalink to &quot;学习各种后端中间件&quot;">​</a></h2><p>后端有很多中间件，比如 mysql、redis、rabbitmq、nacos、elasticsearch 等等，学习 Nest 的过程会用到这些中间件。</p><p>比如类似这种的后端架构：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-7.png" alt="" loading="lazy"></p><p>所以我们学的并不只是 Nest，而是整个后端生态。</p><p>这些东西就算换了 go 或者 java，也是一样要学的。</p><h2 id="可以找国外的全栈工作-或者接远程外包" tabindex="-1">可以找国外的全栈工作，或者接远程外包 <a class="header-anchor" href="#可以找国外的全栈工作-或者接远程外包" aria-label="Permalink to &quot;可以找国外的全栈工作，或者接远程外包&quot;">​</a></h2><p>国外远程工作这块，电鸭社区是最有发言权的。</p><p>你逛一逛就会发现，很多创业公司都会用 Nest 做服务端：</p><p>比如这个：</p><p><a href="https://eleduck.com/posts/oQfOD7" target="_blank" rel="noreferrer">https://eleduck.com/posts/oQfOD7</a></p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-8.png" alt="" loading="lazy"></p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-9.png" alt="" loading="lazy"></p><p>这个：</p><p><a href="https://eleduck.com/tposts/Baf0Dy" target="_blank" rel="noreferrer">https://eleduck.com/tposts/Baf0Dy</a></p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-10.png" alt="" loading="lazy"></p><p>或者这个：</p><p><a href="https://eleduck.com/posts/njfbzD" target="_blank" rel="noreferrer">https://eleduck.com/posts/njfbzD</a></p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-11.png" alt="" loading="lazy"></p><p>还有这个：</p><p><a href="https://eleduck.com/posts/XNfBXN" target="_blank" rel="noreferrer">https://eleduck.com/posts/XNfBXN</a></p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-12.png" alt="" loading="lazy"></p><p>如果你会 React + Nest 技术栈，找个远程全栈工作不也很香么。</p><h2 id="可以独立做自己的产品" tabindex="-1">可以独立做自己的产品 <a class="header-anchor" href="#可以独立做自己的产品" aria-label="Permalink to &quot;可以独立做自己的产品&quot;">​</a></h2><p>如果你想做一个自己的产品，不管是网站、app、小程序还是游戏等应用，都得配上后端吧，如果你熟悉 js/ts，那 Nest 是最适合的选择了。</p><p>比如刚才我们看到这个国外的这个盈利的产品，它就是用 Nest 做的后端：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-13.png" alt="" loading="lazy"></p><p>或者你是大学生，想做一个写在简历里的前端项目，那只写前端就可以了么？</p><p>肯定不行呀，你得前后端都搞定，在简历上写一个完整的项目，这时候 Nest 就很合适了。因为如果你是想做前端工作，那用 java 并不咋加分。</p><h2 id="学习优秀的架构设计" tabindex="-1">学习优秀的架构设计 <a class="header-anchor" href="#学习优秀的架构设计" aria-label="Permalink to &quot;学习优秀的架构设计&quot;">​</a></h2><p>Nest 的架构很优雅，因为它用了不少设计模式。</p><p>比如 Nest 并不和 Express 耦合，你可以轻松切换到 Fastify。</p><p>就是因为它用了适配器的设计模式：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-14.png" alt="" loading="lazy"></p><p>Nest 本身只依赖 HttpServer 接口，并不和具体的库耦合。</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-15.png" alt="" loading="lazy"></p><p>你想换别的 http 处理的库，只要写一个新的适配器就好了。</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-16.png" alt="" loading="lazy"></p><p>再比如 Nest 内构建复杂对象很多地方都用到了 builder 的设计模式：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-17.png" alt="" loading="lazy"></p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/2-18.png" alt="" loading="lazy"></p><p>类似这样的设计有很多。</p><p>当你把 Nest用熟之后，潜移默化中，你就知道了什么地方用什么模式是最好的，应该怎么设计。无形中就提升了架构设计能力。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>不管是你想学 Node 框架，学习各种后端中间件，找国外的远程工作或远程外包，独立开发自己的产品，还是想学习优秀的设计，提升架构能力。Nest 都是一个非常好的选择。</p><p>心动了么？赶紧上车。</p>',73)]))}const m=s(i,[["render",n]]);export{d as __pageData,m as default};
