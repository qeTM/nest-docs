import{_ as a,c as n,o as i,ag as e}from"./chunks/framework.CCM1LoTM.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"4. 快速掌握 Nest CLI.md","filePath":"4. 快速掌握 Nest CLI.md"}'),p={name:"4. 快速掌握 Nest CLI.md"};function t(l,s,c,o,g,h){return i(),n("div",null,s[0]||(s[0]=[e(`<p>项目开发离不开工程化的部分，比如创建项目、编译构建、开发时 watch 文件变动自动构建等。</p><p>Nest 项目自然也是这样，所以它在 @nestjs/cli 这个包里提供了 nest 命令。</p><p>可以直接 npx 执行，npm 会把它下载下来然后执行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx @nestjs/cli new 项目名</span></span></code></pre></div><p>也可以安装到全局，然后执行，更推荐这种：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm install -g @nestjs/cli</span></span>
<span class="line"><span></span></span>
<span class="line"><span>nest new 项目名</span></span></code></pre></div><p>不过后者要时不时升级下版本，不然可能用它创建的项目版本不是最新的：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm update -g @nestjs/cli</span></span></code></pre></div><p>那 nest 都提供了啥命令呢？</p><p>nest -h 看看:</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-1.png" alt="" loading="lazy"></p><p>有创建新项目的 nest new，有生成某些代码的 nest generate，还有编译构建的 nest build，开发模式的 nest start 等。</p><p>分别看一下：</p><h2 id="nest-new" tabindex="-1">nest new <a class="header-anchor" href="#nest-new" aria-label="Permalink to &quot;nest new&quot;">​</a></h2><p>nest new 我们用过，就是创建一个新的 nest 项目的。</p><p>它有这么几个选项：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-2.png" alt="" loading="lazy"></p><p>--skip-git 和 --skip-install 很容易理解，就是跳过 git 的初始化，跳过 npm install。</p><p>--package-manager 是指定包管理器的，之前创建项目的时候会让我们选择：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-3.png" alt="" loading="lazy"></p><p>指定之后，就跳过包管理器选择这步了：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-4.png" alt="" loading="lazy"></p><p>--language 可以指定 typescript 和 javascript，一般我们都选择 ts，用默认的就好。</p><p>--strict 是指定 ts 的编译选项是否开启严格模式的，也就是这么 5 个选项：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-5.png" alt="" loading="lazy"></p><p>默认是 false，也可以指定为 true：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-6.png" alt="" loading="lazy"></p><p>这个之后需要的话再改就行。</p><h2 id="nest-generate" tabindex="-1">nest generate&#39; <a class="header-anchor" href="#nest-generate" aria-label="Permalink to &quot;nest generate&#39;&quot;">​</a></h2><p>nest 命令除了可以生成整个项目外，还可以生成一些别的代码，比如 controller、service、module 等。</p><p>比如生成 module：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nest generate module aaa</span></span></code></pre></div><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-7.png" alt="" loading="lazy"></p><p>它会生成 module 的代码：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-8.png" alt="" loading="lazy"></p><p>还会自动在 AppModule 里引入：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-9.png" alt="" loading="lazy"></p><p>当然你也可以生成 controller、service 等代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nest generate controller aaa</span></span></code></pre></div><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-10.png" alt="" loading="lazy"></p><p>同样，它也会更新到 module 的依赖里去。</p><p>生成 service 也是一样：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-11.png" alt="" loading="lazy"></p><p>当然，如果是要完整生成一个模块的代码，不需要一个个生成，可以用</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nest generate resource xxx</span></span></code></pre></div><p>它会让你选择是哪种代码，因为 nest 支持 http、websocket、graphql、tcp 等，这里我们选择 http 的 REST 风格 api：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-12.png" alt="" loading="lazy"></p><p>然后会让你选择是否生成 CRUD 代码：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-13.png" alt="" loading="lazy"></p><p>选择是。</p><p>然后就会生成整个模块的 CRUD + REST api 的代码：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-14.png" alt="" loading="lazy"></p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-15.png" alt="" loading="lazy"></p><p>当然，它同样会自动在 AppModule 引入：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-16.png" alt="" loading="lazy"></p><p>这就是 nest generate，可以快速生成各种代码：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-17.png" alt="" loading="lazy"></p><p>这些代码模版的集合是在 @nestjs/schematics 这个包里定义的。</p><p>nest new 创建项目的时候有个 --collection 选项，就是配置这个的。</p><p>不过一般我们不需要配置。</p><p>你可以在 <a href="https://github.com/nestjs/schematics/tree/master/src/lib" target="_blank" rel="noreferrer">@nestjs/schematics</a> 里看到这些代码模版的定义：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-18.png" alt="" loading="lazy"></p><p>它的实现原理很简单，就是模版引擎填充变量，打印成代码：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-19.png" alt="" loading="lazy"></p><p>nest generate 也有不少选项：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-20.png" alt="" loading="lazy"></p><p>--flat 和 --no-flat 是指定是否生成对应目录的：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-21.png" alt="" loading="lazy"></p><p>--spec 和 --no-spec 是指定是否生成测试文件：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-22.png" alt="" loading="lazy"></p><p>--skip-import 是指定不在 AppModule 里引入：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-23.png" alt="" loading="lazy"></p><p>也就是不生成这部分代码：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-24.png" alt="" loading="lazy"></p><p>至于 --project，这是指定生成代码在哪个子项目的，等之后用到 monorepo 项目的时候再说。</p><p>这就是 nest cli 提供的快速生成各种代码的能力，是不是还挺方便的？</p><h2 id="nest-build" tabindex="-1">nest build <a class="header-anchor" href="#nest-build" aria-label="Permalink to &quot;nest build&quot;">​</a></h2><p>然后就是 nest build 了，它是用来构建项目的:</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-25.png" alt="" loading="lazy"></p><p>执行 nest build，会在 dist 目录下生成编译后的代码。</p><p>同样，它也有一些选项：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-26.png" alt="" loading="lazy"></p><p>--wepback 和 --tsc 是指定用什么编译，默认是 tsc 编译，也可以切换成 webpack。</p><p>这是 tsc 的编译产物：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-27.png" alt="" loading="lazy"></p><p>这是 webpack 的编译产物：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-28.png" alt="" loading="lazy"></p><p>tsc 不做打包、webpack 会做打包，两种方式都可以。</p><p>node 模块本来就不需要打包，但是打包成单模块能提升加载的性能。</p><p>--watch 是监听文件变动，自动 build 的。</p><p>但是 --watch 默认只是监听 ts、js 文件，加上 --watchAssets 会连别的文件一同监听变化，并输出到 dist 目录，比如 md、yml 等文件。</p><p>--path 是指定 tsc 配置文件的路径的。</p><p>那 --config 是指定什么配置文件呢？</p><p>是 nest cli 的配置文件。</p><h2 id="nest-cli-json" tabindex="-1">nest-cli.json <a class="header-anchor" href="#nest-cli-json" aria-label="Permalink to &quot;nest-cli.json&quot;">​</a></h2><p>刚刚我们说的那些选项都可以在 nest-cli.json 里配置：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-29.png" alt="" loading="lazy"></p><p>比如 compilerOptions 里设置 webpack 为 true 就相当于 nest build --webpack，一样的效果：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-30.png" alt="" loading="lazy"></p><p>webpack 设置为 false 就是用 tsc 了。</p><p>deleteOutDir 设置为 true，每次 build 都会都清空 dist 目录。</p><p>而 assets 是指定 nest build 的时候，把那些非 js、ts 文件也复制到 dist 目录下。</p><p>可以通过 include、exclude 来精确匹配，并且可以单独指定是否 watchAssets。</p><p>不过只支持 src 下文件的复制，如果是非 src 下的，可以自己写脚本复制：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-31.png" alt="" loading="lazy"></p><p>然后是 generateOptions，这些就和我们 nest generate 时的 --no-spec、--no-flat 一样的效果。</p><p>比如我把 flat 设置为 false、spec 设置为 false，那再 generate 代码时就是这样的：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-32.png" alt="" loading="lazy"></p><p>生成了一层目录，并且没有生成测试文件。</p><p>sourceRoot 是指定源码目录。</p><p>entryFile 是指定入口文件的名字，默认是 main。</p><p>而 $schema 是指定 nest-cli.json 的 schema，也就是可以有哪些属性的：</p><p><a href="https://json.schemastore.org/nest-cli" target="_blank" rel="noreferrer">https://json.schemastore.org/nest-cli</a></p><p>这是一种 json schema 的规范，还是挺容易看懂的：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-33.png" alt="" loading="lazy"></p><p>如果想全面了解 nest-cli.json 都有啥属性，可以看看这个 schema 定义。</p><h2 id="nest-start" tabindex="-1">nest start <a class="header-anchor" href="#nest-start" aria-label="Permalink to &quot;nest start&quot;">​</a></h2><p>最后，再来看下 nest start 命令：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-34.png" alt="" loading="lazy"></p><p>可以看到每次重新 build 了，并且用 node 把 main.js 跑了起来。</p><p>它有这些选项：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-35.png" alt="" loading="lazy"></p><p>--watch 是最常用的选项了，也就是改动文件之后自动重新 build：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-36.png" alt="" loading="lazy"></p><p>--debug 是启动调试的 websocket 服务，用来 debug。</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-37.png" alt="" loading="lazy"></p><p>--exec 可以指定用什么来跑，默认是用 node 跑，你也可以切换别的 runtime。</p><p>其余选项和 nest build 一样，就不复述了。</p><h2 id="nest-info" tabindex="-1">nest info <a class="header-anchor" href="#nest-info" aria-label="Permalink to &quot;nest info&quot;">​</a></h2><p>最后还有个 nest info 命令，这个就是查看项目信息的，包括系统信息、 node、npm 和依赖版本：</p><p><img src="//liushuaiyang.oss-cn-shanghai.aliyuncs.com/nest-docs/image/4-38.png" alt="" loading="lazy"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>nest 在 @nestjs/cli 包里提供了 nest 命令，它可以用来做很多事情：</p><ul><li>生成项目结构和各种代码</li><li>编译代码</li><li>监听文件变动自动编译</li><li>打印项目依赖信息</li></ul><p>也就是这些子命令：</p><ul><li>nest new 快速创建项目</li><li>nest generate 快速生成各种代码</li><li>nest build 使用 tsc 或者 webpack 构建代码</li><li>nest start 启动开发服务，支持 watch 和调试</li><li>nest info 打印 node、npm、nest 包的依赖版本</li></ul><p>并且，很多选项都可以在 nest-cli.json 里配置，比如 generateOptions、compilerOptions 等。</p><p>学会用 nest cli，是学好 nest 很重要的一步。</p>`,138)]))}const r=a(p,[["render",t]]);export{d as __pageData,r as default};
